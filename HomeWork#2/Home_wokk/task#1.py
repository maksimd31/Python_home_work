#
# ✔ Напишите программу, которая получает целое число и возвращает его шестнадцатеричное строковое представление.
# Функцию hex используйте для проверки своего результата.
# Напишите программу, которая получает целое число и возвращает его шестнадцатеричное
# строковое представление. Функцию hex используйте для проверки своего результата.


# ВАЖНО
# Я писал решение довольно долго, и у меня слетала операционка, и все пропало, поэтому сдаю все с опозданием,
# полюс нужно успеть сделать следующе дз, задание с банком тоже слетело.
# К сожелению ч 3 дня не пушил в гит изменения, и очень этому расстроился, но это урок(теперь все храню в гит)

# В задание с банком я делал базу клиентов с хранением в sqlit3 и в, вложенных словарях
# (тут я дико запутался, поскольку мне нужно ыло взять данные из словаря обработать их и вернуть обратно в словарь).
# Поэтому я начал делать все через sqlit3, ну и все слетело, осталось только первоначальное решение


dict_ras = {'10': 'a', '11': 'b', '12': 'c', '13': 'd', '14': 'e', '15': 'f'}

num = 171  # число
step = 16  # степень


def dictionary_search(arg):
    """ Функция поиска по словарю """
    if arg in dict_ras:
        return dict_ras.get(arg)


def convert(arg_num, arg_step):
    """ Функция более тривиальная она возвращает только цифры"""
    result = ''
    while arg_num > 0:
        result = str(arg_num % arg_step) + result
        arg_num = arg_num // arg_step
    return result


# Изначально сделал просто, но понял при расчете больших значений вывод не правильный
# и решил сделать буквы

def convert_3(arg):
    """Функция разбивает строку, ищет значение в словаре возвращает результат """
    one_arg = arg[0:2]
    one_arg_2 = arg[2:]
    one_arg = dictionary_search(one_arg)
    one_arg_2 = dictionary_search(one_arg_2)
    return str(one_arg) + str(one_arg_2)


def main_():
    """Вызов всей программы """
    pr = convert(num, step)  # Получаем общий результат
    if len(pr) >= 4:
        print(convert_3(pr))
    else:
        print(*pr)

